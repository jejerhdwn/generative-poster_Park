# -*- coding: utf-8 -*-
"""Arts and Advanced Big Data-Park-Week2.ipynb의 사본

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mEaw5xoYSno8fJJ-JZpzAVA8K4Z8W6U7

# Mini Project A — Generative Abstract Poster

I modified the abstract shapes into my favorite star shapes and experimented with different color tones, creating a softer pastel-style pattern.
"""

# Generative Abstract Poster
# Concepts: randomness, lists, loops, functions, matplotlib

import random
import math
import numpy as np
import matplotlib.pyplot as plt

def random_palette(k=5):
    # return k random pastel-like colors
    return [(random.random(), random.random(), random.random()) for _ in range(k)]

def blob(center=(0.5, 0.5), r=0.3, points=200, wobble=0.15):
    # generate a wobbly closed shape
    angles = np.linspace(0, 2*math.pi, points)
    radii = r * (1 + wobble*(np.random.rand(points)-0.5))
    x = center[0] + radii * np.cos(angles)
    y = center[1] + radii * np.sin(angles)
    return x, y

random.seed()  # different art each run
plt.figure(figsize=(7,10))
plt.axis('off')

# background
plt.gca().set_facecolor((0.98,0.98,0.97))

palette = random_palette(6)
n_layers = 8
for i in range(n_layers):
    cx, cy = random.random(), random.random()
    rr = random.uniform(0.15, 0.45)
    x, y = blob(center=(cx, cy), r=rr, wobble=random.uniform(0.05,0.25))
    color = random.choice(palette)
    alpha = random.uniform(0.25, 0.6)
    plt.fill(x, y, color=color, alpha=alpha, edgecolor=(0,0,0,0))

# simple typographic label
plt.text(0.05, 0.95, "Generative Poster", fontsize=18, weight='bold', transform=plt.gca().transAxes)
plt.text(0.05, 0.91, "Week 2 • Arts & Advanced Big Data", fontsize=11, transform=plt.gca().transAxes)

plt.xlim(0,1); plt.ylim(0,1)
plt.show()

"""Star-shaped wobble"""

# Generative Abstract Star Poster
# Concept: randomness, functions, and layered star shapes

import random
import math
import numpy as np
import matplotlib.pyplot as plt


def random_palette(k=6, mode="vivid"):
    """Generate k random colors based on the selected mode."""
    cols = []
    for _ in range(k):
        if mode == "pastel":
            h = random.random(); s = random.uniform(0.2, 0.4); v = random.uniform(0.9, 1.0)
        elif mode == "vivid":
            h = random.random(); s = random.uniform(0.8, 1.0); v = random.uniform(0.8, 1.0)
        else:
            h = random.random(); s = random.uniform(0.4, 1.0); v = random.uniform(0.6, 1.0)
        cols.append(tuple(np.clip(np.random.rand(3), 0, 1)))  # RGB random fallback
    return cols


def star_shape(center=(0.5, 0.5), r_outer=0.3, r_inner=0.15, num_points=5, wobble=0.1):
    """
    Generate a star-like abstract shape with optional irregularity (wobble).
    """
    angles = np.linspace(0, 2 * math.pi, num_points * 2)
    radii = np.empty_like(angles)

    for i in range(len(angles)):
        # alternate between outer and inner radius
        base_r = r_outer if i % 2 == 0 else r_inner
        # add small random wobble to each radius
        radii[i] = base_r * (1 + wobble * (random.random() - 0.5))

    x = center[0] + radii * np.cos(angles)
    y = center[1] + radii * np.sin(angles)
    return x, y


# --- Poster generation ---
random.seed()
plt.figure(figsize=(7, 10))
plt.axis('off')
plt.gca().set_facecolor((0.98, 0.98, 0.97))

palette = random_palette(6, mode="vivid")
n_layers = 7  # number of stars to draw

for i in range(n_layers):
    cx, cy = random.random(), random.random()  # random center
    outer_r = random.uniform(0.15, 0.4)        # outer radius
    inner_r = outer_r * random.uniform(0.4, 0.7)
    x, y = star_shape(
        center=(cx, cy),
        r_outer=outer_r,
        r_inner=inner_r,
        num_points=random.choice([5, 6, 7]),
        wobble=random.uniform(0.05, 0.25)
    )
    color = random.choice(palette)
    alpha = random.uniform(0.3, 0.6)
    plt.fill(x, y, color=color, alpha=alpha, edgecolor=(0, 0, 0, 0))

# Add title
plt.text(0.05, 0.95, "Generative Star Poster", fontsize=18, weight='bold', transform=plt.gca().transAxes)
plt.text(0.05, 0.91, "Week 2 • Arts & Advanced Big Data", fontsize=11, transform=plt.gca().transAxes)

plt.xlim(0, 1)
plt.ylim(0, 1)
plt.show()

# Generative True Star Poster (5-point star version)

import random
import math
import numpy as np
import matplotlib.pyplot as plt


def random_palette(k=6, mode="vivid"):
    """Generate k random RGB colors."""
    cols = []
    for _ in range(k):
        if mode == "pastel":
            cols.append((random.uniform(0.6, 1.0), random.uniform(0.6, 1.0), random.uniform(0.6, 1.0)))
        elif mode == "vivid":
            cols.append((random.random(), random.random(), random.random()))
        else:
            cols.append(tuple(np.clip(np.random.rand(3), 0, 1)))
    return cols


def true_star(center=(0.5, 0.5), r_outer=0.3, r_inner=0.15, num_points=5, wobble=0.1):
    """
    Generate a true star (★) shape by connecting non-adjacent vertices.
    """
    cx, cy = center
    # angles for outer and inner points alternately
    angles_outer = np.linspace(0, 2 * math.pi, num_points, endpoint=False)
    angles_inner = angles_outer + math.pi / num_points
    angles = np.empty(num_points * 2)
    angles[0::2] = angles_outer
    angles[1::2] = angles_inner

    radii = np.empty_like(angles)
    for i in range(len(angles)):
        base_r = r_outer if i % 2 == 0 else r_inner
        radii[i] = base_r * (1 + wobble * (random.random() - 0.5))

    x = cx + radii * np.cos(angles)
    y = cy + radii * np.sin(angles)
    # close the shape
    x = np.append(x, x[0])
    y = np.append(y, y[0])
    return x, y


# --- Poster generation ---
random.seed()
plt.figure(figsize=(7, 10))
plt.axis('off')
plt.gca().set_facecolor((0.98, 0.98, 0.97))

palette = random_palette(6, mode="vivid")
n_layers = 8

for i in range(n_layers):
    cx, cy = random.random(), random.random()
    outer_r = random.uniform(0.15, 0.4)
    inner_r = outer_r * random.uniform(0.35, 0.55)
    x, y = true_star(
        center=(cx, cy),
        r_outer=outer_r,
        r_inner=inner_r,
        num_points=5,
        wobble=random.uniform(0.02, 0.15)
    )
    color = random.choice(palette)
    alpha = random.uniform(0.3, 0.6)
    plt.fill(x, y, color=color, alpha=alpha, edgecolor=(0, 0, 0, 0))

plt.text(0.05, 0.95, "Generative Star Poster", fontsize=18, weight='bold', transform=plt.gca().transAxes)
plt.text(0.05, 0.91, "Week 2 • Arts & Advanced Big Data", fontsize=11, transform=plt.gca().transAxes)

plt.xlim(0, 1)
plt.ylim(0, 1)
plt.show()

"""In pastel color"""

import matplotlib.pyplot as plt
import numpy as np
import random

# 파스텔톤 색상 팔레트
pastel_colors = [
    "#FFB3BA",  # 파스텔 핑크
    "#FFDFBA",  # 파스텔 오렌지
    "#FFFFBA",  # 파스텔 옐로
    "#BAFFC9",  # 파스텔 그린
    "#BAE1FF",  # 파스텔 블루
    "#E2BAFF",  # 파스텔 퍼플
]

def draw_star(ax, center, size, color, wobble=0.0):
    num_points = 5  # 별 꼭짓점 5개 고정
    outer_points = []
    inner_points = []

    for i in range(num_points * 2):
        angle = np.pi / num_points * i
        radius = size if i % 2 == 0 else size * 0.4
        radius *= random.uniform(1 - wobble, 1 + wobble)
        x = center[0] + radius * np.cos(angle)
        y = center[1] + radius * np.sin(angle)
        if i % 2 == 0:
            outer_points.append((x, y))
        else:
            inner_points.append((x, y))

    points = []
    for i in range(num_points):
        points.append(outer_points[i])
        points.append(inner_points[i])
    points.append(outer_points[0])

    x_vals, y_vals = zip(*points)
    ax.fill(x_vals, y_vals, color=color, alpha=0.8)

# 캔버스 생성
fig, ax = plt.subplots(figsize=(8, 8))
ax.set_xlim(0, 10)
ax.set_ylim(0, 10)
ax.set_aspect('equal')
ax.axis('off')

# 파스텔 별 여러 개 그리기
for _ in range(15):
    x = random.uniform(0.5, 9.5)
    y = random.uniform(0.5, 9.5)
    size = random.uniform(0.3, 0.8)
    color = random.choice(pastel_colors)
    wobble = random.uniform(0.02, 0.1)
    draw_star(ax, (x, y), size, color, wobble=wobble)

plt.show()